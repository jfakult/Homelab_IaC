worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  #include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on;
  keepalive_timeout 65;

  index index.html index.htm;

  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  # Reusable proxy headers
  include /etc/nginx/conf.d/proxy_common.conf;

  # Metrics endpoint for Prometheus scraping
  include /etc/nginx/conf.d/metrics.conf;

  server {
    listen 80;
    listen [::]:80;
    server_name {{ domain_name }};

    # Special exceptions served in plaintext
    location = /nossl {
      default_type text/plain;
      return 200 "This is plain HTTP!\n";
    }
    # Special exceptions served in plaintext
    location = /neverssl {
      default_type text/plain;
      return 200 "This is plain HTTP!\n";
    }
    location = /http {
      default_type text/plain;
      return 200 "This is plain HTTP!\n";
    }

    # Everything else â†’ HTTPS
    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name {{ domain_name }};

    ssl_certificate     /etc/nginx/ssl/{{ domain_name }}.crt;
    ssl_certificate_key /etc/nginx/ssl/{{ domain_name }}.key;

    include /etc/nginx/conf.d/ssl_params.conf;

    # If someone tries to force http endpoint over HTTPS, send them back to HTTP
    location = /nossl { return 301 http://$host$request_uri; }
    location = /neverssl { return 301 http://$host$request_uri; }
    location = /http  { return 301 http://$host$request_uri; }

    # Static files
    include /etc/nginx/snippets/static.conf;

    # Proxied services
    include /etc/nginx/snippets/dns.conf;
    include /etc/nginx/snippets/monitoring.conf;
    include /etc/nginx/snippets/jellyfin.conf;
    include /etc/nginx/snippets/kiwix.conf;     # port 3090
    include /etc/nginx/snippets/nodeJS_servers.conf;     # port 3090

    location /share {
		alias /usr/share/nginx/share;   # mounted NAS share
		autoindex on;

		add_header 'Access-Control-Allow-Origin' '*';
        	add_header 'Access-Control-Allow-Credentials' 'true';
        	add_header 'Access-Control-Allow-Methods' 'GET';
        	add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	}

    # Catch-all fallback
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ =404;    # only existing files; otherwise 404
        autoindex off;
    }
  }
}
