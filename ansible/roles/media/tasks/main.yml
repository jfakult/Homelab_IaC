- name: Install packages
  package:
    name:
      - ffmpeg
    state: present
    update_cache: yes

- name: Ensure directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ jellyfin_uid }}"
    group: "{{ jellyfin_gid }}"
    mode: "0755"
  loop:
    - "{{ jellyfin_compose_dir }}"
    - "/srv/jellyfin_config"

- name: Mount NAS Media Share
  import_tasks: ../../misc/tasks/install_nas_reqs.yml
  vars:
    local_mount_path: "{{ media_paths.root_media }}"
    nas_share_path: /mnt/user/Server_Media
    mount_opts: "{{ media_mount_opts }}"

- name: Mount NAS Media metadata Share
  import_tasks: ../../misc/tasks/install_nas_reqs.yml
  vars:
    local_mount_path: "{{ media_paths.root_config }}"
    nas_share_path: /mnt/user/Server_MediaConfig
    mount_opts: "{{ media_mount_opts }}"

- name: Drop docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "{{ jellyfin_compose_dir }}/docker-compose.yml"
    owner: root
    group: root
    mode: "0644"
  register: compose_file

- name: Check if Jellyfin is already running
  command: docker ps --filter "name=jellyfin$" --filter "status=running" --format "{{'{{.Names}}'}}"
  register: jf_ps
  changed_when: false
  failed_when: false

- name: Bring up Jellyfin stack (only if not running OR compose changed)
  shell: docker compose up -d
  args:
    chdir: "{{ jellyfin_compose_dir }}"
  when: jf_ps.stdout == "" or compose_file.changed

- name: Validate Jellyfin is listening (host networking :8096)
  wait_for:
    host: "{{ ansible_host }}"
    port: 8096
    delay: 1
    timeout: 60

- name: Install public cert to host trust
  copy:
    src: "{{ pki_build_dir }}/{{ sso_fqdn }}.crt"
    dest: /usr/local/share/ca-certificates/{{ sso_fqdn }}.crt
    mode: "0644"
  tags: [pki]

- name: Update host CA store
  #shell: update-ca-certificates
  shell: docker exec -u 0 -it jellyfin bash -lc 'update-ca-certificates'  # Run as root
  register: ca_update
  changed_when: "'1 added' in ca_update.stdout or 'done' in ca_update.stdout"
  tags: [pki]

- name: Install cert into Jellyfin container trust
  shell: |
    docker cp /usr/local/share/ca-certificates/{{ sso_fqdn }}.crt jellyfin:/usr/local/share/ca-certificates/{{ sso_fqdn }}.crt
    docker exec jellyfin sh -lc 'update-ca-certificates || update-ca-trust extract || true'
  tags: [pki]